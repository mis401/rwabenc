(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{d1:()=>zt,md:()=>Bt,cm:()=>Pt,j5:()=>Mt,OS:()=>Rt,aF:()=>Nt,jS:()=>Ft});var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},e(t,n)};function n(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function r(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function s(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t){return"function"==typeof t}function l(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var a=l((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function d(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,u;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var d=i(l),h=d.next();!h.done;h=d.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=d.return)&&e.call(d)}finally{if(t)throw t.error}}else l.remove(this);var f=this.initialTeardown;if(c(f))try{f()}catch(t){u=t instanceof a?t.errors:[t]}var p=this._finalizers;if(p){this._finalizers=null;try{for(var b=i(p),y=b.next();!y.done;y=b.next()){var m=y.value;try{v(m)}catch(t){u=null!=u?u:[],t instanceof a?u=s(s([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=b.return)&&r.call(b)}finally{if(n)throw n.error}}}if(u)throw new a(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&d(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&d(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),f=h.EMPTY;function p(t){return t instanceof h||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function v(t){c(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},y={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=y.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,s([t,e],o(n))):setTimeout.apply(void 0,s([t,e],o(n)))},clearTimeout:function(t){var e=y.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function m(t){y.setTimeout((function(){var e=b.onUnhandledError;if(!e)throw t;e(t)}))}function w(){}var g=x("C",void 0,void 0);function x(t,e,n){return{kind:t,value:e,error:n}}var S=null;function E(t){if(b.useDeprecatedSynchronousErrorHandling){var e=!S;if(e&&(S={errorThrown:!1,error:null}),t(),e){var n=S,r=n.errorThrown,i=n.error;if(S=null,r)throw i}}else t()}var I=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,p(e)&&e.add(n)):n.destination=L,n}return n(e,t),e.create=function(t,e,n){return new O(t,e,n)},e.prototype.next=function(t){this.isStopped?k(function(t){return x("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?k(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?k(g,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(h),_=Function.prototype.bind;function C(t,e){return _.call(t,e)}var T=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){A(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){A(t)}else A(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){A(t)}},t}(),O=function(t){function e(e,n,r){var i,o,s=t.call(this)||this;return c(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&b.useDeprecatedNextContext?((o=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},i={next:e.next&&C(e.next,o),error:e.error&&C(e.error,o),complete:e.complete&&C(e.complete,o)}):i=e,s.destination=new T(i),s}return n(e,t),e}(I);function A(t){var e;b.useDeprecatedSynchronousErrorHandling?(e=t,b.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=e)):m(t)}function k(t,e){var n=b.onStoppedNotification;n&&y.setTimeout((function(){return n(t,e)}))}var L={closed:!0,next:w,error:function(t){throw t},complete:w},M="function"==typeof Symbol&&Symbol.observable||"@@observable";function $(t){return t}var j=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof I||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(r)&&p(r)?t:new O(t,e,n);return E((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=H(e))((function(e,r){var i=new O({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[M]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?$:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=H(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function H(t){var e;return null!==(e=null!=t?t:b.Promise)&&void 0!==e?e:Promise}var P=l((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),z=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return n(e,t),e.prototype.lift=function(t){var e=new D(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new P},e.prototype.next=function(t){var e=this;E((function(){var n,r;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var o=i(e.currentObservers),s=o.next();!s.done;s=o.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;E((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;E((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,i=n.isStopped,o=n.observers;return r||i?f:(this.currentObservers=null,o.push(t),new h((function(){e.currentObservers=null,d(o,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,i=e.isStopped;n?t.error(r):i&&t.complete()},e.prototype.asObservable=function(){var t=new j;return t.source=this,t},e.create=function(t,e){return new D(t,e)},e}(j),D=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return n(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:f},e}(z),B=function(t){function e(e,n){return t.call(this)||this}return n(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(h),N={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=N.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,s([t,e],o(n))):setInterval.apply(void 0,s([t,e],o(n)))},clearInterval:function(t){var e=N.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},U=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return n(e,t),e.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),N.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&N.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(B),W={now:function(){return(W.delegate||Date).now()},delegate:void 0},R=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=W.now,t}(),F=new(function(t){function e(e,n){void 0===n&&(n=R.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return n(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(R))(U),Y=F;function q(t){return t&&c(t.schedule)}var V=Array.isArray,G=Object.getPrototypeOf,X=Object.prototype,J=Object.keys;var K=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Q(t){return c(null==t?void 0:t.then)}function Z(t){return c(t[M])}function tt(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function et(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var nt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function rt(t){return c(null==t?void 0:t[nt])}function it(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=i[t](e)).value instanceof u?Promise.resolve(n.value.v).then(l,a):d(o[0][2],n)}catch(t){d(o[0][3],t)}var n}function l(t){c("next",t)}function a(t){c("throw",t)}function d(t,e){t(e),o.shift(),o.length&&c(o[0][0],o[0][1])}}(this,arguments,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(e.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ot(t){return c(null==t?void 0:t.getReader)}function st(t){if(t instanceof j)return t;if(null!=t){if(Z(t))return o=t,new j((function(t){var e=o[M]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(K(t))return r=t,new j((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(Q(t))return n=t,new j((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,m)}));if(tt(t))return ut(t);if(rt(t))return e=t,new j((function(t){var n,r;try{for(var o=i(e),s=o.next();!s.done;s=o.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(ot(t))return ut(it(t))}var e,n,r,o;throw et(t)}function ut(t){return new j((function(e){(function(t,e){var n,o,s,u,c,l,a,d;return c=this,l=void 0,d=function(){var c,l;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=i(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,n.next()];case 2:if((o=r.sent()).done)return[3,4];if(c=o.value,e.next(c),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=r.sent(),s={error:l},[3,11];case 6:return r.trys.push([6,,9,10]),o&&!o.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{i(d.next(t))}catch(t){e(t)}}function r(t){try{i(d.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof a?i:new a((function(t){t(i)}))).then(n,r)}i((d=d.apply(c,l||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function ct(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function lt(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function at(t,e,n,r,i){return new dt(t,e,n,r,i)}var dt=function(t){function e(e,n,r,i,o,s){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=s,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return n(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(I);function ht(t,e){return void 0===e&&(e=0),lt((function(n,r){n.subscribe(at(r,(function(n){return ct(r,t,(function(){return r.next(n)}),e)}),(function(){return ct(r,t,(function(){return r.complete()}),e)}),(function(n){return ct(r,t,(function(){return r.error(n)}),e)})))}))}function ft(t,e){return void 0===e&&(e=0),lt((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function pt(t,e){if(!t)throw new Error("Iterable cannot be null");return new j((function(n){ct(n,e,(function(){var r=t[Symbol.asyncIterator]();ct(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function vt(t,e){return e?function(t,e){if(null!=t){if(Z(t))return function(t,e){return st(t).pipe(ft(e),ht(e))}(t,e);if(K(t))return function(t,e){return new j((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(Q(t))return function(t,e){return st(t).pipe(ft(e),ht(e))}(t,e);if(tt(t))return pt(t,e);if(rt(t))return function(t,e){return new j((function(n){var r;return ct(n,e,(function(){r=t[nt](),ct(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ot(t))return function(t,e){return pt(it(t),e)}(t,e)}throw et(t)}(t,e):st(t)}function bt(t,e){return lt((function(n,r){var i=0;n.subscribe(at(r,(function(n){r.next(t.call(e,n,i++))})))}))}var yt=Array.isArray;function mt(t){return t[t.length-1]}function wt(t){return c(mt(t))?t.pop():void 0}function gt(t){return q(mt(t))?t.pop():void 0}function xt(t,e,n){t?ct(n,t,e):e()}function St(t,e){return lt((function(n,r){var i=0;n.subscribe(at(r,(function(n){return t.call(e,n,i++)&&r.next(n)})))}))}var Et=Array.isArray,It=new j((function(t){return t.complete()}));function _t(t,e,n){var r=c(t)||e||n?{next:t,error:e,complete:n}:t;return r?lt((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe(at(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):$}const Ct=(10,(t=>{const e=new Map;for(let t=0;t<10;t++)e.set(`R${t}`,{name:`R${t}`,value:0});return e})());var Tt,Ot;!function(t){t.Add="ADD",t.Subtract="SUB",t.Multiply="MUL",t.Divide="DIV"}(Tt||(Tt={}));class At{constructor(t,e,n,r){this.operation=t,this.op1=e,Number(e)?this.op1Immediate=!0:this.op1Immediate=!1,this.op2=n,Number(n)?this.op2Immediate=!0:this.op2Immediate=!1,this.dest=r}toString(){return`${this.operation} ${this.dest} ${this.op1} ${this.op2}`}}!function(t){t.NotIssued="Not issued",t.Issued="Issued",t.ExecStart="Execution started",t.ExecComplet="Execution completed",t.Write="Write"}(Ot||(Ot={}));class kt{constructor(t,e){var n;this.operation=e,this.instructions=[],this.name=t,this.busy=!1,this.deBlock=this.exBlock=this.wbBlock=!1,this.latency=(t=>{switch(this.operation){case Tt.Add:case Tt.Subtract:return 1;case Tt.Multiply:return 2;case Tt.Divide:return 5;default:return 0}})(),this.status=Ot.NotIssued,this.clockSub=Pt.subscribe((t=>this.workCycle(this.instruction,t))),this.instructionBus$=Nt.pipe(St((t=>t.fu.name===this.name)),lt((function(t,e){var n=new Set;t.subscribe(at(e,(function(t){var r=t;n.has(r)||(n.add(r),e.next(t))})))})),(n=Pt,lt((function(t,e){var r=!1,i=null;t.subscribe(at(e,(function(t){r=!0,i=t}))),st(n).subscribe(at(e,(function(){if(r){r=!1;var t=i;i=null,e.next(t)}}),w))})))).subscribe((t=>{this.instruction=t}))}workCycle(t,e){if(null!=t&&null!=t)if(this.deBlock){if(console.log(this.instruction.op1Immediate),0==this.instruction.op1Immediate){console.log("Op1 nije immediate");let t=Ft.get(this.instruction.op1);null!=t?Bt.pipe(St((e=>e.source===t))).subscribe({next:t=>{this.instruction.op1=t.value,this.instruction.op1Immediate=!0}}):(this.instruction.op1Immediate=!0,this.instruction.op1=Ct.get(this.instruction.op1).value)}if(0==this.instruction.op2Immediate){console.log("Op2 nije immediate");let t=Ft.get(this.instruction.op2);null!=t?Bt.pipe(St((e=>e.source===t))).subscribe({next:t=>{this.instruction.op2=t.value,this.instruction.op2Immediate=!0}}):(this.instruction.op2Immediate=!0,this.instruction.op2=Ct.get(this.instruction.op2).value)}this.status===Ot.Issued&&this.instruction.op1Immediate&&this.instruction.op2Immediate?(console.log("execution starts"),Lt.next({fu:this,cycle:e,status:Ot.ExecStart,instruction:this.instruction}),this.status=Ot.ExecStart,this.endCycle=e+this.latency):this.status===Ot.ExecStart&&e===this.endCycle?(console.log("execution ends"),this.status=Ot.ExecComplet,this.result=((t,e,n,r)=>{switch("string"==typeof n&&(n=Ct.get(n).value),"string"==typeof r&&(r=Ct.get(r).value),t){case Tt.Add:return Ct.get(e).value=n+r;case Tt.Subtract:return Ct.get(e).value=n-r;case Tt.Multiply:return Ct.get(e).value=n*r;case Tt.Divide:return Ct.get(e).value=n/r}})(this.operation,this.instruction.dest,this.instruction.op1,this.instruction.op2),Lt.next({fu:this,cycle:e,status:Ot.ExecComplet,instruction:this.instruction})):this.status===Ot.ExecComplet&&(console.log("writes"),Lt.next({fu:this,cycle:e,status:Ot.Write,instruction:this.instruction}),Bt.next({source:this.name,value:this.result}),this.status=Ot.Write,console.log("reset"),this.instruction=null,this.busy=!1,this.status=Ot.NotIssued,this.deBlock=!1)}else this.deBlock=!0,console.log(`Usao u cycle ${this.name}`),this.issue(t,e),console.log(`Izasao iz cycle ${this.name}`)}issue(t,e){this.instruction=t,this.busy=!0,this.startCycle=e,this.status=Ot.Issued,this.endCycle=Number.MAX_VALUE,Lt.next({fu:this,cycle:e,status:Ot.Issued,instruction:t}),console.log(`Instruction ${t.toString()} issued to ${this.name}`),this.deBlock=!0}}const Lt=new z,Mt=new z,$t=(void 0===(jt=1e3)&&(jt=0),void 0===Ht&&(Ht=F),jt<0&&(jt=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Y);var r=-1;return null!=e&&(q(e)?n=e:r=e),new j((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var s=0;return n.schedule((function(){e.closed||(e.next(s++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(jt,jt,Ht));var jt,Ht;const Pt=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=gt(t),r=wt(t),i=function(t){if(1===t.length){var e=t[0];if(V(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&G(r)===X){var n=J(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),u=i.args,c=i.keys;if(0===u.length)return vt([],n);var l,a=new j(function(t,e,n){return void 0===n&&(n=$),function(r){xt(e,(function(){for(var i=t.length,o=new Array(i),s=i,u=i,c=function(i){xt(e,(function(){var c=vt(t[i],e),l=!1;c.subscribe(at(r,(function(t){o[i]=t,l||(l=!0,u--),u||r.next(n(o.slice()))}),(function(){--s||r.complete()})))}),r)},l=0;l<i;l++)c(l)}),r)}}(u,n,c?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(c,t)}:$));return r?a.pipe((l=r,bt((function(t){return function(t,e){return yt(e)?t.apply(void 0,s([],o(e))):t(e)}(l,t)})))):a}([Mt,$t]).pipe(St((([t,e])=>t)),bt((([t,e])=>e))),zt=document.body,Dt=new class{constructor(){this.instructions=[],this.draw(),Pt.subscribe((()=>this.schedule()))}schedule(){if(console.log("Work started"),this.instructions.length>0){let t=null;for(let e of Rt)if(!1===e.busy&&e.operation===this.instructions[0].operation){t=e,t.busy=!0;break}if(console.log(`search result fu: ${t}`),null!=t){console.log(`Brt wtf ${this.instructions[0]}`);let e=this.instructions.shift();e.fu=t,console.log(e),Nt.next(e)}else console.log(`No free FU for ${this.instructions[0].operation}`)}}addInstruction(t){this.instructions.push(t)}getInstruction(){return this.instructions.shift()||null}getAllInstructions(){return this.instructions}isEmpty(){return 0===this.instructions.length}draw(){const t=document.body,e=document.createElement("div");e.id="instructionWrapper",e.classList.add("instruction-wrapper"),t.appendChild(e);const n=document.createElement("input");n.type="text",n.id="instructionField",n.placeholder="Enter Instructions",e.appendChild(n);const r=document.createElement("button");r.id="startButton",r.innerText="Start",r.onclick=()=>Mt.next(!0),e.appendChild(r)}oldDraw(){const t=document.body,e=document.createElement("div");e.id="instructionWrapper",e.classList.add("instruction-wrapper"),t.appendChild(e);const n=document.createElement("input");n.type="text",n.id="instructionOp1",n.placeholder="Enter Operand 1",e.appendChild(n),n.classList.add("instruction-op");const r=document.createElement("select");r.id="instructionOp",r.options.add(new Option("Add",Tt.Add)),r.options.add(new Option("Multiply",Tt.Multiply)),r.options.add(new Option("Subtract",Tt.Subtract)),r.options.add(new Option("Divide",Tt.Divide)),e.appendChild(r),r.classList.add("instruction-op");const i=document.createElement("input");i.type="text",i.id="instructionOp2",i.placeholder="Enter Operand 2",e.appendChild(i),i.classList.add("instruction-op");const o=document.createElement("input");o.type="text",o.id="instructionDest",o.placeholder="Enter Destination",e.appendChild(o),o.classList.add("instruction-op");const s=document.createElement("button");s.id="instructionButton",s.innerText="Add Instruction",s.onclick=()=>this.createInstruction(),e.appendChild(s);const u=document.createElement("button");u.id="startButton",u.innerText="Start",u.onclick=()=>Mt.next(!0),e.appendChild(u);const c=document.createElement("button");c.id="stopButton",c.innerText="Stop",c.onclick=()=>Mt.next(!1),e.appendChild(c);const l=document.createElement("list");l.id="instructionList",l.classList.add("instruction-list"),t.appendChild(l),this.instructions$=vt(this.instructions).pipe(_t((t=>console.log(` Tap radi? ${t.toString()}`))),St((t=>{if(this.instructions[this.instructions.length-1]==t)return!0})))}createInstruction(){const t=document.getElementById("instructionOp1").value,e=document.getElementById("instructionOp2").value,n=document.getElementById("instructionOp").value,r=document.getElementById("instructionDest").value;if("string"==typeof t&&0===t.length||Number(t.substring(1))>Ct.size-1)return;if("string"==typeof e&&0===e.length||Number(e.substring(1))>Ct.size-1)return;if("string"==typeof r&&0===r.length||Number(r.substring(1))>Ct.size-1)return;let i=new At(n,t,e,r);this.addInstruction(i),console.log(i),i.index=this.instructions.length-1,this.instructions$.subscribe((t=>{let e=document.createElement("li");e.innerText=t.toString(),document.getElementById("instructionList").appendChild(e)}))}},Bt=new z,Nt=new z,Ut=vt(Dt.getAllInstructions()),Wt=new class{constructor(){this.instructions=[]}draw(){const t=zt,e=document.createElement("table");e.id="instructionTable",e.classList.add("instruction-table"),t.appendChild(e);const n=document.createElement("tr");n.id="instructionHeader",n.classList.add("instruction-header"),e.appendChild(n);const r=document.createElement("th");r.id="instructionHeaderOp",r.classList.add("instruction-header-op"),r.innerText="Operation",n.appendChild(r);const i=document.createElement("th");i.id="instructionHeaderIssue",i.classList.add("instruction-header-issue"),i.innerText="Issue",n.appendChild(i);const o=document.createElement("th");o.id="instructionExec",o.classList.add("instruction-header-exec"),o.innerText="Execute",n.appendChild(o);const s=document.createElement("th");s.id="instructionHeaderWrite",s.classList.add("instruction-header-write"),s.innerText="Write",n.appendChild(s),this.table=e}};Wt.draw(),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=wt(t),r=function(t){return 1===t.length&&Et(t[0])?t[0]:t}(t);return r.length?new j((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var u=function(u){st(r[u]).subscribe(at(t,(function(r){if(e[u].push(r),e.every((function(t){return t.length}))){var c=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,s([],o(c))):c),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[u]=!0,!e[u].length&&t.complete()})))},c=0;!t.closed&&c<r.length;c++)u(c);return function(){e=i=null}})):It}(Mt,Ut).pipe(St((([t,e])=>1==t)),bt((([t,e])=>e))).subscribe((t=>{console.log(`Instruction ${t.toString()} is now drawing in table`);let e=Wt.table.insertRow();e.insertCell(0).innerHTML=t.toString(),e.insertCell(1).innerHTML="",e.insertCell(2).innerHTML="",e.insertCell(3).innerHTML=""}));const Rt=new Array;for(let t=0;t<3;t++)Rt.push(new kt(`Add${t}`,Tt.Add));for(let t=0;t<2;t++)Rt.push(new kt(`Mul${t}`,Tt.Multiply));!function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];vt(t,gt(t))}(Rt),Lt.pipe(_t((t=>console.log(t)))).subscribe((t=>{const e=Wt.table;let n=e.rows[t.instruction.index+1];switch(n||(n=e.insertRow(t.instruction.index+1),e.rows[t.instruction.index+1].insertCell(0).innerHTML=t.instruction.toString()),t.status){case Ot.Issued:e.rows[t.instruction.index+1].insertCell(1).innerHTML=`${t.cycle}`;break;case Ot.ExecStart:e.rows[t.instruction.index+1].insertCell(2).innerHTML=`${t.cycle}`;break;case Ot.ExecComplet:e.rows[t.instruction.index+1].cells[2].innerHTML=`${n.cells[2].innerHTML} - ${t.cycle}`;break;case Ot.Write:e.rows[t.instruction.index+1].insertCell(3).innerHTML=`${t.cycle}`}}));const Ft=new class{constructor(){this.registers=new Map,this.instructionIssueUpdate=()=>Nt.subscribe((t=>{let e;for(this.registers.set(t.dest,t.fu.name),console.log(`Register ${t.dest} is now awaiting writeback from ${t.fu.name}`),e=0;e<Ct.size-1&&this.table.rows[0].cells[e].innerHTML!==t.dest;e++);this.table.rows[1].cells[e].innerHTML=t.fu.name})),this.instructionWriteUpdate=()=>Bt.subscribe((t=>{let e;for(this.registers.entries(),e=0;e<Ct.size-1;e++)if(this.table.rows[1].cells[e].innerHTML===t.source){this.table.rows[1].cells[e].innerHTML="",this.registers.set(this.table.rows[0].cells[e].innerHTML,null);break}})),Ct.forEach((t=>{this.registers.set(t.name,null)})),this.subsIssue=this.instructionIssueUpdate(),this.subsWrite=this.instructionWriteUpdate(),this.table=this.draw()}get(t){return this.registers.get(t)}draw(){const t=document.body,e=document.createElement("table");e.id="registryStatus",t.appendChild(e),e.insertRow(),e.insertRow();for(let t of this.registers.entries())e.rows[0].insertCell().innerHTML=t[0],e.rows[1].insertCell().innerHTML=t[1];return e}};Nt.pipe(_t((t=>console.log(`tap iz index ${t.toString()}`)))).subscribe(),Bt.pipe(_t()).subscribe((t=>console.log(` cdb tap iz index ${t.toString()}`)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,